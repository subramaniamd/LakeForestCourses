obs_mean
set.seed(238)
null_distribution1 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.4) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "two_sided")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "two_sided")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "two_sided")
dry_data <- total_data %>% filter(residual.sugar < 4)
obs_mean <- dry_data %>%
specify(response = volatile.acidity) %>%
calculate(stat = "mean")
obs_mean
set.seed(238)
null_distribution1 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.4) %>%
generate(reps = 100, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "two_sided")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "two_sided")
dry_data <- total_data %>% filter(residual.sugar < 4)
obs_mean <- dry_data %>%
specify(response = volatile.acidity) %>%
calculate(stat = "mean")
obs_mean
set.seed(238)
null_distribution1 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.4) %>%
generate(reps = 10, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "two_sided")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "two_sided")
dry_data <- total_data %>% filter(residual.sugar < 4)
obs_mean <- dry_data %>%
specify(response = volatile.acidity) %>%
calculate(stat = "mean")
obs_mean
set.seed(238)
null_distribution1 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.4) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "two_sided")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "two_sided")
mean(gpa_data$gpa_fy)
# Make sure to execute this code chunk to load the necessary packages and data.
# Necessary Packages
library(tidyverse)
library(infer)   # Package for Statistical Inference
# Sample Data - Assume drawn rendomly from a population with unknown parameters.
gpa_data <- read_csv("gpa_data.csv")    # The CSV file is included with the project files.
gpa_data
# View it, glimpse() it, or whatever your preferred way is for wrapping your brain around this data set.
# Also run this so the tibble displays will show sufficient significant figures (won't round off or truncate decimals)
options(pillar.sigfig = 5)  # Only have to run once per RStudio Session.
mean(gpa_data$gpa_fy)
set.seed(237)
null_distributio <- gpa_data %>%
specify(response = gpa_fy) %>%
hypothesize(null = "point", mu = 2.5) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distributio
percentile_ci <- null_distributio %>%
get_confidence_interval(level = 0.95, type = "percentile")
percentile_ci
null_distributio %>%
get_p_value(obs_stat = 2.538, direction = "two_sided")
visualize(null_distributio, bins = 20) +
shade_p_value(obs_stat = 2.53, direction = "two_sided")
dry_data <- total_data %>% filter(residual.sugar < 4)
obs_mean <- dry_data %>%
specify(response = volatile.acidity) %>%
calculate(stat = "mean")
obs_mean
set.seed(238)
null_distribution1 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.4) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "right")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "right")
?shade_p_value
dry_data <- total_data %>% filter(residual.sugar < 4)
obs_mean <- dry_data %>%
specify(response = volatile.acidity) %>%
calculate(stat = "mean")
obs_mean
set.seed(238)
null_distribution1 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.4) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "right")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "right")
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "right")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "right")
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "left")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "left")
mean(total_data$volatile.acidity)
set.seed(238)
null_distribution2 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.6) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution2 %>%
get_p_value(obs_stat = 0.339666, direction = "two_sided")
visualize(null_distribution2, bins = 20) +
shade_p_value(obs_stat = 0.339666, direction = "two_sided")
mean(total_data$volatile.acidity)
set.seed(238)
null_distribution2 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.6) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution2 %>%
get_p_value(obs_stat = 0.339666, direction = "two_sided")
visualize(null_distribution2, bins = 20) +
shade_p_value(obs_stat = 0.339666, direction = "two_sided")
mean(total_data$volatile.acidity)
set.seed(250)
null_distribution2 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.6) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution2 %>%
get_p_value(obs_stat = 0.339666, direction = "two_sided")
visualize(null_distribution2, bins = 20) +
shade_p_value(obs_stat = 0.339666, direction = "two_sided")
dry_data <- total_data %>% filter(residual.sugar < 4)
obs_mean <- dry_data %>%
specify(response = volatile.acidity) %>%
calculate(stat = "mean")
obs_mean
set.seed(238)
null_distribution1 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.4) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "two_sided")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci) +  shade_p_value(obs_stat = obs_mean, direction = "two_sided")
mean(total_data$volatile.acidity)
set.seed(250)
null_distribution2 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.6) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution2 %>%
get_p_value(obs_stat = 0.339666, direction = "two_sided")
visualize(null_distribution2, bins = 20) +
shade_p_value(obs_stat = 0.339666, direction = "two_sided")
mean(total_data$volatile.acidity)
set.seed(250)
null_distribution2 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.6) %>%
generate(reps = 10, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution2 %>%
get_p_value(obs_stat = 0.339666, direction = "two_sided")
visualize(null_distribution2, bins = 20) +
shade_p_value(obs_stat = 0.339666, direction = "two_sided")
mean(total_data$volatile.acidity)
set.seed(250)
null_distribution2 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.6) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution2 %>%
get_p_value(obs_stat = 0.339666, direction = "two_sided")
visualize(null_distribution2, bins = 20) +
shade_p_value(obs_stat = 0.339666, direction = "two_sided")
mean(total_data$volatile.acidity)
set.seed(250)
null_distribution2 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.6) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution2 %>%
get_p_value(obs_stat = 0.339666, direction = "two_sided")
visualize(null_distribution2, bins = 20) +
shade_p_value(obs_stat = 0.339666, direction = "two_sided")
mean(total_data$volatile.acidity)
var(total_data$volatile.acidity)
length(total_data$volatile.acidity)
install.packages("amsmath")
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides)
ggqqplot(white_data$chlorides)
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE)
View(total_data)
ggplot(red_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "black", fill = "darkred") + ggtitle("Histogram of Red wine Chlorides")
ggplot(white_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white", fill = "wheat2") + ggtitle("Histogram of White wine Chlorides")
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides)
ggqqplot(white_data$chlorides)
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE)
t.test(red_data$quality, white_data$quality, alternative = "two.sided")
v <- c(white_data$quality,red_data$quality)
a <- c(rep("1", 4898), rep("2", 1599))
data1 <- data.frame(v, as.factor(a))
anova <- aov(a~v, data1)
summary(anova)
dry_data <- total_data %>% filter(residual.sugar < 4)
obs_mean <- dry_data %>%
specify(response = volatile.acidity) %>%
calculate(stat = "mean")
obs_mean
set.seed(238)
null_distribution1 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.4) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "two_sided")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci,  color = "darkred", fill = "wheat2") +  shade_p_value(obs_stat = obs_mean, direction = "two_sided")
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides)
ggqqplot(white_data$chlorides)
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE, color = "darkred")
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides)
ggqqplot(white_data$chlorides)
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE, fill = "darkred")
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , fill = "darkred")
ggqqplot(white_data$chlorides)
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE)
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , col = "darkred")
ggqqplot(white_data$chlorides)
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE)
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , col = "darkred")
ggqqplot(white_data$chlorides, col = "wheat2")
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE)
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , col = "darkred")
ggqqplot(white_data$chlorides, col = "wheat3")
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE)
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , col = "darkred")
ggqqplot(white_data$chlorides, col = "wheat3")
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE) + labs(x = "White Wine Chlorides", y = "Red Wine Chlorides")
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , col = "darkred")
ggqqplot(white_data$chlorides, col = "wheat3")
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE) +
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , col = "darkred")
ggqqplot(white_data$chlorides, col = "wheat3")
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE)
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , col = "darkred")
ggqqplot(white_data$chlorides, col = "wheat3")
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE, xlab  = "White Wine Chlorides", ylab = "Red Wine Chlorides")
View(null_distribution2)
t.test(red_data$quality, white_data$quality, alternative = "two.sided")
v <- c(white_data$quality,red_data$quality)
a <- c(rep("1", 4898), rep("2", 1599))
data1 <- data.frame(v, as.factor(a))
anova <- aov(a~v, data1)
summary(anova)
ggplot(data = total_data, aes(x = quality)) + geom_histogram(binwidth = 1) + facet_wrap(~color)
ggplot(data = total_data, aes(x = quality)) + geom_histogram(binwidth = 1) + facet_wrap(~color)
t.test(red_data$quality, white_data$quality, alternative = "two.sided")
v <- c(white_data$quality,red_data$quality)
a <- c(rep("1", 4898), rep("2", 1599))
data1 <- data.frame(v, as.factor(a))
anova <- aov(a~v, data1)
summary(anova)
library(ggplot2)
library(stats)
library(tidyverse)
library(moderndive)
library(dplyr)
library(infer)
library(knitr)
library(skimr)
library(ggpubr)
library(ISLR)
library(readr)
#red_data <- winequality.red
#white_data <- winequality.white
red_data <- read_delim("winequality-red.csv", ";", escape_double = FALSE)
white_data <- read_delim("winequality-white.csv", ";", escape_double = FALSE)
names(red_data)<-str_replace_all(names(red_data), c(" " = "." , "," = "" ))
names(white_data)<-str_replace_all(names(white_data), c(" " = "." , "," = "" ))
white_data2 <- white_data %>%
mutate(color = "white")
red_data2 <- red_data %>%
mutate(color = "red")
total_data <- rbind(white_data2, red_data2)
total_data <- total_data %>% filter(volatile.acidity < 1.2)
total_data <- total_data %>% filter(volatile.acidity != 1.100)
dry_data <- total_data %>% filter(residual.sugar < 4)
obs_mean <- dry_data %>%
specify(response = volatile.acidity) %>%
calculate(stat = "mean")
obs_mean
set.seed(238)
null_distribution1 <- dry_data %>%
specify(response = volatile.acidity) %>%
hypothesize(null = "point", mu = 0.4) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
percentile_ci <- null_distribution1 %>%
get_confidence_interval(level = 0.95, type = "percentile", point_estimate = obs_mean)
percentile_ci
null_distribution1 %>%
get_p_value(obs_stat =  obs_mean, direction = "two_sided")
visualize(null_distribution1, bins = 20) +    shade_confidence_interval(endpoints = percentile_ci,  color = "darkred", fill = "wheat2") +  shade_p_value(obs_stat = obs_mean, direction = "two_sided")
ggplot(red_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "black", fill = "darkred") + ggtitle("Histogram of Red wine Chlorides")
ggplot(white_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white", fill = "wheat2") + ggtitle("Histogram of White wine Chlorides")
ggplot(total_data, aes(x = chlorides, color = c("darkred", "wheat2"))) +
geom_histogram(binwidth = .01, color = "white") + ggtitle("Histogram of Chlorides") +   facet_wrap(~ color)
ggplot(red_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "black", fill = "darkred") + ggtitle("Histogram of Red wine Chlorides")
ggplot(white_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white", fill = "wheat2") + ggtitle("Histogram of White wine Chlorides")
ggplot(total_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white"  fill = c("darkred", "wheat2")) + ggtitle("Histogram of Chlorides") +   facet_wrap(~ color)
ggplot(red_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "black", fill = "darkred") + ggtitle("Histogram of Red wine Chlorides")
ggplot(white_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white", fill = "wheat2") + ggtitle("Histogram of White wine Chlorides")
ggplot(total_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white",  fill = c("darkred", "wheat2")) + ggtitle("Histogram of Chlorides") +   facet_wrap(~ color)
ggplot(red_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "black", fill = "darkred") + ggtitle("Histogram of Red wine Chlorides")
ggplot(white_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white", fill = "wheat2") + ggtitle("Histogram of White wine Chlorides")
ggplot(total_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white") + ggtitle("Histogram of Chlorides") +   facet_wrap(~ color)
?facet_wrap
ggplot(red_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "black", fill = "darkred") + ggtitle("Histogram of Red wine Chlorides")
ggplot(white_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white", fill = "wheat2") + ggtitle("Histogram of White wine Chlorides")
ggplot(total_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "black") + ggtitle("Histogram of Chlorides") +   facet_wrap(~ color) + scale_fill_manual(values=c("darkred", "wheat2"))
ggplot(red_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "black", fill = "darkred") + ggtitle("Histogram of Red wine Chlorides")
ggplot(white_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white", fill = "wheat2") + ggtitle("Histogram of White wine Chlorides")
ggplot(total_data, aes(x = chlorides, color = color, fill = color)) +
geom_histogram(binwidth = .01, color = "black") + ggtitle("Histogram of Chlorides") +   facet_wrap(~ color) + scale_fill_manual(values=c("darkred", "wheat2"))
ggplot(red_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "black", fill = "darkred") + ggtitle("Histogram of Red wine Chlorides")
ggplot(white_data, aes(x = chlorides)) +
geom_histogram(binwidth = .01, color = "white", fill = "wheat2") + ggtitle("Histogram of White wine Chlorides")
ggplot(total_data, aes(x = chlorides, fill = color)) +
geom_histogram(binwidth = .01, color = "black") + ggtitle("Histogram of Chlorides") +   facet_wrap(~ color) + scale_fill_manual(values=c("darkred", "wheat2"))
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , col = "darkred")
ggqqplot(white_data$chlorides, col = "wheat3")
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE, xlab  = "White Wine Chlorides", ylab = "Red Wine Chlorides")
t.test(red_data$chlorides, white_data$chlorides, alternative = "two.sided")
ggqqplot(red_data$chlorides , col = "darkred")
ggqqplot(white_data$chlorides, col = "wheat3")
qqplot(red_data$chlorides, white_data$chlorides, plot.it = TRUE, xlab  = "White Wine Chlorides", ylab = "Red Wine Chlorides")
ggplot(data = total_data, aes(x = quality, fill = color)) + geom_histogram(binwidth = 1) + facet_wrap(~color)
ggplot(total_data, aes(x = quality, fill = color)) + geom_histogram(binwidth = 1) + facet_wrap(~color)+ scale_fill_manual(values=c("darkred", "wheat2"))
t.test(red_data$quality, white_data$quality, alternative = "two.sided")
***
summary(Wage)
library(ggplot2)
library(islr)
library(dplyr)
summary(Wage)
table(Wage$education, Wage$jobclass)
library(ggplot2)
library(ISLR)
library(dplyr)
summary(Wage)
table(Wage$education, Wage$jobclass)
?binconf
library(tidyverse)
?binconf
library(MASS)
?binconf
library(Hmisc)
?binconf
summary(Wage)
percentile_ci <- Wage$wage %>%
get_confidence_interval(level = 0.95, type = "percentile")
library(infer)
library(tidyverse)
library(MASS)
library(Hmisc)
percentile_ci <- Wage$wage %>%
get_confidence_interval(level = 0.95, type = "percentile")
dist <- Wage$wage
percentile_ci <- dist %>%
get_confidence_interval(level = 0.95, type = "percentile")
dist
percentile_ci <- dist %>%
get_confidence_interval(level = 0.95, type = "percentile")
dist <- data.frame(Wage$wage)
percentile_ci <- dist %>%
get_confidence_interval(level = 0.95, type = "percentile")
percentile_ci
summary(Wage)
length(Wage)
length(Wage$wage)
sd(Wage$wage)
mean(Wage$wage)
n <- length(Wage$wage)
s <- sd(Wage$wage)
mean(Wage$wage)
error <- 2.326* s / sqrt(n)
error
mean - error
m <- mean(Wage$wage)
mean - error
m - error
m ? error
m + error
#6b
s <- sd(Wage$Married)
s
#6b
p <- 2074/3000
s <- sqrt(p*(1-p)*n)
error <- 1.645*s/sqrt(n)
p
s
error
p-error
p+error
s
s <- sqrt(p*(1-p))
error <- 1.645*s/sqrt(n)
p-error
p+error
#6c
table(Wage$education, Wage$wage)
#6c
table(Wage$wage,Wage$education)
